%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(protocolo).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'Mensagem'() ::
      #{tipo                    := iolist(),        % = 1
        juro                    => float() | integer() | infinity | '-infinity' | nan, % = 2
        quantia                 => integer(),       % = 3, 32 bits
        empresa                 => iolist(),        % = 4
        investidor              => iolist()         % = 5
       }.

-type 'ExchangeRequest'() ::
      #{mensagem                := 'Mensagem'(),    % = 1
        pid                     := iodata()         % = 2
       }.

-type 'ExchangeReply'() ::
      #{sucesso                 := boolean() | 0 | 1 % = 1
       }.

-type 'LeilaoReply'() ::
      #{taxaMaximaAlocada       := float() | integer() | infinity | '-infinity' | nan, % = 1
        taxaMaxima              := float() | integer() | infinity | '-infinity' | nan, % = 2
        sucesso                 := boolean() | 0 | 1 % = 3
       }.

-type 'EmissaoReply'() ::
      #{taxa                    := float() | integer() | infinity | '-infinity' | nan, % = 1
        sucesso                 := boolean() | 0 | 1 % = 2
       }.

-type 'DirectoryReply'() ::
      #{success                 := boolean() | 0 | 1, % = 1
        leilao                  => 'LeilaoReply'(), % = 2
        emissao                 => 'EmissaoReply'() % = 3
       }.

-type 'DirectoryRequest'() ::
      #{tipo                    := iolist(),        % = 1
        empresa                 := iolist()         % = 2
       }.

-type 'AddDirectoryRequest'() ::
      #{tipo                    := iolist(),        % = 1
        juro                    => float() | integer() | infinity | '-infinity' | nan, % = 2
        quantia                 => integer(),       % = 3, 32 bits
        empresa                 => iolist(),        % = 4
        investidor              => iolist()         % = 5
       }.

-type 'AuthReq'() ::
      #{username                := iolist(),        % = 1
        password                := iolist()         % = 2
       }.

-type 'AuthRep'() ::
      #{sucesso                 := boolean() | 0 | 1, % = 1
        tipo                    => integer()        % = 2, 32 bits
       }.

-type 'Reply'() ::
      #{sucesso                 := boolean() | 0 | 1 % = 1
       }.

-export_type(['Mensagem'/0, 'ExchangeRequest'/0, 'ExchangeReply'/0, 'LeilaoReply'/0, 'EmissaoReply'/0, 'DirectoryReply'/0, 'DirectoryRequest'/0, 'AddDirectoryRequest'/0, 'AuthReq'/0, 'AuthRep'/0, 'Reply'/0]).

-spec encode_msg('Mensagem'() | 'ExchangeRequest'() | 'ExchangeReply'() | 'LeilaoReply'() | 'EmissaoReply'() | 'DirectoryReply'() | 'DirectoryRequest'() | 'AddDirectoryRequest'() | 'AuthReq'() | 'AuthRep'() | 'Reply'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('Mensagem'() | 'ExchangeRequest'() | 'ExchangeReply'() | 'LeilaoReply'() | 'EmissaoReply'() | 'DirectoryReply'() | 'DirectoryRequest'() | 'AddDirectoryRequest'() | 'AuthReq'() | 'AuthRep'() | 'Reply'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Mensagem' ->
	  encode_msg_Mensagem(id(Msg, TrUserData), TrUserData);
      'ExchangeRequest' ->
	  encode_msg_ExchangeRequest(id(Msg, TrUserData),
				     TrUserData);
      'ExchangeReply' ->
	  encode_msg_ExchangeReply(id(Msg, TrUserData),
				   TrUserData);
      'LeilaoReply' ->
	  encode_msg_LeilaoReply(id(Msg, TrUserData), TrUserData);
      'EmissaoReply' ->
	  encode_msg_EmissaoReply(id(Msg, TrUserData),
				  TrUserData);
      'DirectoryReply' ->
	  encode_msg_DirectoryReply(id(Msg, TrUserData),
				    TrUserData);
      'DirectoryRequest' ->
	  encode_msg_DirectoryRequest(id(Msg, TrUserData),
				      TrUserData);
      'AddDirectoryRequest' ->
	  encode_msg_AddDirectoryRequest(id(Msg, TrUserData),
					 TrUserData);
      'AuthReq' ->
	  encode_msg_AuthReq(id(Msg, TrUserData), TrUserData);
      'AuthRep' ->
	  encode_msg_AuthRep(id(Msg, TrUserData), TrUserData);
      'Reply' ->
	  encode_msg_Reply(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Mensagem(Msg, TrUserData) ->
    encode_msg_Mensagem(Msg, <<>>, TrUserData).


encode_msg_Mensagem(#{tipo := F1} = M, Bin,
		    TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = case M of
	   #{juro := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{quantia := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{empresa := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	       end;
	   _ -> B3
	 end,
    case M of
      #{investidor := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	  end;
      _ -> B4
    end.

encode_msg_ExchangeRequest(Msg, TrUserData) ->
    encode_msg_ExchangeRequest(Msg, <<>>, TrUserData).


encode_msg_ExchangeRequest(#{mensagem := F1, pid := F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_ExchangeRequest_mensagem(TrF1,
					     <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_ExchangeReply(Msg, TrUserData) ->
    encode_msg_ExchangeReply(Msg, <<>>, TrUserData).


encode_msg_ExchangeReply(#{sucesso := F1}, Bin,
			 TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_LeilaoReply(Msg, TrUserData) ->
    encode_msg_LeilaoReply(Msg, <<>>, TrUserData).


encode_msg_LeilaoReply(#{taxaMaximaAlocada := F1,
			 taxaMaxima := F2, sucesso := F3},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_EmissaoReply(Msg, TrUserData) ->
    encode_msg_EmissaoReply(Msg, <<>>, TrUserData).


encode_msg_EmissaoReply(#{taxa := F1, sucesso := F2},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_DirectoryReply(Msg, TrUserData) ->
    encode_msg_DirectoryReply(Msg, <<>>, TrUserData).


encode_msg_DirectoryReply(#{success := F1} = M, Bin,
			  TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = case M of
	   #{leilao := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_mfield_DirectoryReply_leilao(TrF2, <<B1/binary, 18>>,
						TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{emissao := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    e_mfield_DirectoryReply_emissao(TrF3, <<B2/binary, 26>>,
					    TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_DirectoryRequest(Msg, TrUserData) ->
    encode_msg_DirectoryRequest(Msg, <<>>, TrUserData).


encode_msg_DirectoryRequest(#{tipo := F1,
			      empresa := F2},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_AddDirectoryRequest(Msg, TrUserData) ->
    encode_msg_AddDirectoryRequest(Msg, <<>>, TrUserData).


encode_msg_AddDirectoryRequest(#{tipo := F1} = M, Bin,
			       TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = case M of
	   #{juro := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{quantia := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{empresa := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	       end;
	   _ -> B3
	 end,
    case M of
      #{investidor := F5} ->
	  begin
	    TrF5 = id(F5, TrUserData),
	    e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	  end;
      _ -> B4
    end.

encode_msg_AuthReq(Msg, TrUserData) ->
    encode_msg_AuthReq(Msg, <<>>, TrUserData).


encode_msg_AuthReq(#{username := F1, password := F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_AuthRep(Msg, TrUserData) ->
    encode_msg_AuthRep(Msg, <<>>, TrUserData).


encode_msg_AuthRep(#{sucesso := F1} = M, Bin,
		   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    case M of
      #{tipo := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_Reply(Msg, TrUserData) ->
    encode_msg_Reply(Msg, <<>>, TrUserData).


encode_msg_Reply(#{sucesso := F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

e_mfield_ExchangeRequest_mensagem(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_Mensagem(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DirectoryReply_leilao(Msg, Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 12>>,
    encode_msg_LeilaoReply(Msg, Bin2, TrUserData).

e_mfield_DirectoryReply_emissao(Msg, Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 7>>,
    encode_msg_EmissaoReply(Msg, Bin2, TrUserData).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Mensagem', Bin, TrUserData) ->
    id(decode_msg_Mensagem(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ExchangeRequest', Bin, TrUserData) ->
    id(decode_msg_ExchangeRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ExchangeReply', Bin, TrUserData) ->
    id(decode_msg_ExchangeReply(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LeilaoReply', Bin, TrUserData) ->
    id(decode_msg_LeilaoReply(Bin, TrUserData), TrUserData);
decode_msg_2_doit('EmissaoReply', Bin, TrUserData) ->
    id(decode_msg_EmissaoReply(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('DirectoryReply', Bin, TrUserData) ->
    id(decode_msg_DirectoryReply(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('DirectoryRequest', Bin,
		  TrUserData) ->
    id(decode_msg_DirectoryRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AddDirectoryRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AddDirectoryRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthReq', Bin, TrUserData) ->
    id(decode_msg_AuthReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AuthRep', Bin, TrUserData) ->
    id(decode_msg_AuthRep(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Reply', Bin, TrUserData) ->
    id(decode_msg_Reply(Bin, TrUserData), TrUserData).



decode_msg_Mensagem(Bin, TrUserData) ->
    dfp_read_field_def_Mensagem(Bin, 0, 0,
				id('$undef', TrUserData),
				id('$undef', TrUserData),
				id('$undef', TrUserData),
				id('$undef', TrUserData),
				id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Mensagem(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Mensagem_tipo(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_Mensagem(<<21, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Mensagem_juro(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_Mensagem(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Mensagem_quantia(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_Mensagem(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Mensagem_empresa(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_Mensagem(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Mensagem_investidor(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Mensagem(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, _) ->
    S1 = #{tipo => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{juro => F@_2}
	 end,
    S3 = if F@_3 == '$undef' -> S2;
	    true -> S2#{quantia => F@_3}
	 end,
    S4 = if F@_4 == '$undef' -> S3;
	    true -> S3#{empresa => F@_4}
	 end,
    if F@_5 == '$undef' -> S4;
       true -> S4#{investidor => F@_5}
    end;
dfp_read_field_def_Mensagem(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Mensagem(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Mensagem(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Mensagem(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Mensagem(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Mensagem_tipo(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      21 ->
	  d_field_Mensagem_juro(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      24 ->
	  d_field_Mensagem_quantia(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      34 ->
	  d_field_Mensagem_empresa(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      42 ->
	  d_field_Mensagem_investidor(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Mensagem(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
	    1 ->
		skip_64_Mensagem(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData);
	    2 ->
		skip_length_delimited_Mensagem(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Mensagem(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Mensagem(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData)
	  end
    end;
dg_read_field_def_Mensagem(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    S1 = #{tipo => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{juro => F@_2}
	 end,
    S3 = if F@_3 == '$undef' -> S2;
	    true -> S2#{quantia => F@_3}
	 end,
    S4 = if F@_4 == '$undef' -> S3;
	    true -> S3#{empresa => F@_4}
	 end,
    if F@_5 == '$undef' -> S4;
       true -> S4#{investidor => F@_5}
    end.

d_field_Mensagem_tipo(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Mensagem_tipo(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Mensagem_tipo(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Mensagem(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_Mensagem_juro(<<0:16, 128, 127, Rest/binary>>,
		      Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Mensagem(Rest, Z1, Z2, F@_1,
				id(infinity, TrUserData), F@_3, F@_4, F@_5,
				TrUserData);
d_field_Mensagem_juro(<<0:16, 128, 255, Rest/binary>>,
		      Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Mensagem(Rest, Z1, Z2, F@_1,
				id('-infinity', TrUserData), F@_3, F@_4, F@_5,
				TrUserData);
d_field_Mensagem_juro(<<_:16, 1:1, _:7, _:1, 127:7,
			Rest/binary>>,
		      Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Mensagem(Rest, Z1, Z2, F@_1,
				id(nan, TrUserData), F@_3, F@_4, F@_5,
				TrUserData);
d_field_Mensagem_juro(<<Value:32/little-float,
			Rest/binary>>,
		      Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Mensagem(Rest, Z1, Z2, F@_1,
				id(Value, TrUserData), F@_3, F@_4, F@_5,
				TrUserData).

d_field_Mensagem_quantia(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Mensagem_quantia(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Mensagem_quantia(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Mensagem(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, F@_5, TrUserData).

d_field_Mensagem_empresa(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Mensagem_empresa(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Mensagem_empresa(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Mensagem(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, TrUserData).

d_field_Mensagem_investidor(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Mensagem_investidor(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Mensagem_investidor(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Mensagem(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, TrUserData).

skip_varint_Mensagem(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Mensagem(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
skip_varint_Mensagem(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Mensagem(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Mensagem(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Mensagem(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
skip_length_delimited_Mensagem(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Mensagem(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_group_Mensagem(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Mensagem(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_32_Mensagem(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Mensagem(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_64_Mensagem(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Mensagem(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

decode_msg_ExchangeRequest(Bin, TrUserData) ->
    dfp_read_field_def_ExchangeRequest(Bin, 0, 0,
				       id('$undef', TrUserData),
				       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ExchangeRequest(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ExchangeRequest_mensagem(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_ExchangeRequest(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ExchangeRequest_pid(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_ExchangeRequest(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    S1 = #{pid => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{mensagem => F@_1}
    end;
dfp_read_field_def_ExchangeRequest(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_ExchangeRequest(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_ExchangeRequest(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ExchangeRequest(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_ExchangeRequest(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ExchangeRequest_mensagem(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  d_field_ExchangeRequest_pid(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ExchangeRequest(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_ExchangeRequest(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_ExchangeRequest(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_ExchangeRequest(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_ExchangeRequest(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_ExchangeRequest(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    S1 = #{pid => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{mensagem => F@_1}
    end.

d_field_ExchangeRequest_mensagem(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ExchangeRequest_mensagem(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_ExchangeRequest_mensagem(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Mensagem(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ExchangeRequest(RestF, 0, 0,
				       if Prev == '$undef' -> NewFValue;
					  true ->
					      merge_msg_Mensagem(Prev,
								 NewFValue,
								 TrUserData)
				       end,
				       F@_2, TrUserData).

d_field_ExchangeRequest_pid(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ExchangeRequest_pid(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_ExchangeRequest_pid(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ExchangeRequest(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_ExchangeRequest(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ExchangeRequest(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_ExchangeRequest(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ExchangeRequest(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_ExchangeRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ExchangeRequest(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_ExchangeRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ExchangeRequest(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_ExchangeRequest(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ExchangeRequest(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_ExchangeRequest(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ExchangeRequest(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_ExchangeRequest(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ExchangeRequest(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_ExchangeReply(Bin, TrUserData) ->
    dfp_read_field_def_ExchangeReply(Bin, 0, 0,
				     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ExchangeReply(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_ExchangeReply_sucesso(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_ExchangeReply(<<>>, 0, 0, F@_1, _) ->
    #{sucesso => F@_1};
dfp_read_field_def_ExchangeReply(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_ExchangeReply(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_ExchangeReply(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ExchangeReply(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ExchangeReply(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ExchangeReply_sucesso(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ExchangeReply(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_ExchangeReply(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ExchangeReply(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_ExchangeReply(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_ExchangeReply(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ExchangeReply(<<>>, 0, 0, F@_1, _) ->
    #{sucesso => F@_1}.

d_field_ExchangeReply_sucesso(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ExchangeReply_sucesso(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_ExchangeReply_sucesso(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_ExchangeReply(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_ExchangeReply(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_ExchangeReply(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_ExchangeReply(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ExchangeReply(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_ExchangeReply(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ExchangeReply(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ExchangeReply(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ExchangeReply(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_ExchangeReply(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ExchangeReply(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_ExchangeReply(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_ExchangeReply(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_ExchangeReply(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_ExchangeReply(Rest, Z1, Z2, F@_1,
				     TrUserData).

decode_msg_LeilaoReply(Bin, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Bin, 0, 0,
				   id('$undef', TrUserData),
				   id('$undef', TrUserData),
				   id('$undef', TrUserData), TrUserData).

dfp_read_field_def_LeilaoReply(<<13, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LeilaoReply_taxaMaximaAlocada(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_LeilaoReply(<<21, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LeilaoReply_taxaMaxima(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_LeilaoReply(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LeilaoReply_sucesso(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_LeilaoReply(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #{taxaMaximaAlocada => F@_1, taxaMaxima => F@_2,
      sucesso => F@_3};
dfp_read_field_def_LeilaoReply(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    dg_read_field_def_LeilaoReply(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

dg_read_field_def_LeilaoReply(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeilaoReply(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_LeilaoReply(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_LeilaoReply_taxaMaximaAlocada(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      21 ->
	  d_field_LeilaoReply_taxaMaxima(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      24 ->
	  d_field_LeilaoReply_sucesso(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeilaoReply(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    1 ->
		skip_64_LeilaoReply(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    2 ->
		skip_length_delimited_LeilaoReply(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_LeilaoReply(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, TrUserData);
	    5 ->
		skip_32_LeilaoReply(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData)
	  end
    end;
dg_read_field_def_LeilaoReply(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #{taxaMaximaAlocada => F@_1, taxaMaxima => F@_2,
      sucesso => F@_3}.

d_field_LeilaoReply_taxaMaximaAlocada(<<0:16, 128, 127,
					Rest/binary>>,
				      Z1, Z2, _, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Rest, Z1, Z2,
				   id(infinity, TrUserData), F@_2, F@_3,
				   TrUserData);
d_field_LeilaoReply_taxaMaximaAlocada(<<0:16, 128, 255,
					Rest/binary>>,
				      Z1, Z2, _, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Rest, Z1, Z2,
				   id('-infinity', TrUserData), F@_2, F@_3,
				   TrUserData);
d_field_LeilaoReply_taxaMaximaAlocada(<<_:16, 1:1, _:7,
					_:1, 127:7, Rest/binary>>,
				      Z1, Z2, _, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Rest, Z1, Z2,
				   id(nan, TrUserData), F@_2, F@_3, TrUserData);
d_field_LeilaoReply_taxaMaximaAlocada(<<Value:32/little-float,
					Rest/binary>>,
				      Z1, Z2, _, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Rest, Z1, Z2,
				   id(Value, TrUserData), F@_2, F@_3,
				   TrUserData).

d_field_LeilaoReply_taxaMaxima(<<0:16, 128, 127,
				 Rest/binary>>,
			       Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Rest, Z1, Z2, F@_1,
				   id(infinity, TrUserData), F@_3, TrUserData);
d_field_LeilaoReply_taxaMaxima(<<0:16, 128, 255,
				 Rest/binary>>,
			       Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Rest, Z1, Z2, F@_1,
				   id('-infinity', TrUserData), F@_3,
				   TrUserData);
d_field_LeilaoReply_taxaMaxima(<<_:16, 1:1, _:7, _:1,
				 127:7, Rest/binary>>,
			       Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Rest, Z1, Z2, F@_1,
				   id(nan, TrUserData), F@_3, TrUserData);
d_field_LeilaoReply_taxaMaxima(<<Value:32/little-float,
				 Rest/binary>>,
			       Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Rest, Z1, Z2, F@_1,
				   id(Value, TrUserData), F@_3, TrUserData).

d_field_LeilaoReply_sucesso(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LeilaoReply_sucesso(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_LeilaoReply_sucesso(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_LeilaoReply(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, TrUserData).

skip_varint_LeilaoReply(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_LeilaoReply(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
skip_varint_LeilaoReply(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_length_delimited_LeilaoReply(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeilaoReply(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
skip_length_delimited_LeilaoReply(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeilaoReply(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, TrUserData).

skip_group_LeilaoReply(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeilaoReply(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_32_LeilaoReply(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_64_LeilaoReply(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LeilaoReply(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

decode_msg_EmissaoReply(Bin, TrUserData) ->
    dfp_read_field_def_EmissaoReply(Bin, 0, 0,
				    id('$undef', TrUserData),
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_EmissaoReply(<<13, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_EmissaoReply_taxa(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_EmissaoReply(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_EmissaoReply_sucesso(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_EmissaoReply(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #{taxa => F@_1, sucesso => F@_2};
dfp_read_field_def_EmissaoReply(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_EmissaoReply(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_EmissaoReply(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EmissaoReply(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_EmissaoReply(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_EmissaoReply_taxa(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_EmissaoReply_sucesso(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EmissaoReply(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_EmissaoReply(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_EmissaoReply(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_EmissaoReply(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_EmissaoReply(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_EmissaoReply(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #{taxa => F@_1, sucesso => F@_2}.

d_field_EmissaoReply_taxa(<<0:16, 128, 127,
			    Rest/binary>>,
			  Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_EmissaoReply(Rest, Z1, Z2,
				    id(infinity, TrUserData), F@_2, TrUserData);
d_field_EmissaoReply_taxa(<<0:16, 128, 255,
			    Rest/binary>>,
			  Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_EmissaoReply(Rest, Z1, Z2,
				    id('-infinity', TrUserData), F@_2,
				    TrUserData);
d_field_EmissaoReply_taxa(<<_:16, 1:1, _:7, _:1, 127:7,
			    Rest/binary>>,
			  Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_EmissaoReply(Rest, Z1, Z2,
				    id(nan, TrUserData), F@_2, TrUserData);
d_field_EmissaoReply_taxa(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_EmissaoReply(Rest, Z1, Z2,
				    id(Value, TrUserData), F@_2, TrUserData).

d_field_EmissaoReply_sucesso(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_EmissaoReply_sucesso(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_EmissaoReply_sucesso(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_EmissaoReply(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_EmissaoReply(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_EmissaoReply(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_EmissaoReply(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_EmissaoReply(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_EmissaoReply(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_EmissaoReply(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_EmissaoReply(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EmissaoReply(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_EmissaoReply(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EmissaoReply(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_EmissaoReply(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_EmissaoReply(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_EmissaoReply(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_EmissaoReply(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

decode_msg_DirectoryReply(Bin, TrUserData) ->
    dfp_read_field_def_DirectoryReply(Bin, 0, 0,
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_DirectoryReply(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_DirectoryReply_success(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_DirectoryReply(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_DirectoryReply_leilao(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_DirectoryReply(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_DirectoryReply_emissao(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_DirectoryReply(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, _) ->
    S1 = #{success => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{leilao => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{emissao => F@_3}
    end;
dfp_read_field_def_DirectoryReply(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_DirectoryReply(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

dg_read_field_def_DirectoryReply(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DirectoryReply(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
dg_read_field_def_DirectoryReply(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_DirectoryReply_success(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      18 ->
	  d_field_DirectoryReply_leilao(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      26 ->
	  d_field_DirectoryReply_emissao(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DirectoryReply(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    1 ->
		skip_64_DirectoryReply(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    2 ->
		skip_length_delimited_DirectoryReply(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_DirectoryReply(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_DirectoryReply(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData)
	  end
    end;
dg_read_field_def_DirectoryReply(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    S1 = #{success => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{leilao => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{emissao => F@_3}
    end.

d_field_DirectoryReply_success(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_DirectoryReply_success(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_DirectoryReply_success(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_DirectoryReply(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, TrUserData).

d_field_DirectoryReply_leilao(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_DirectoryReply_leilao(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_DirectoryReply_leilao(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_LeilaoReply(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DirectoryReply(RestF, 0, 0, F@_1,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_LeilaoReply(Prev,
								   NewFValue,
								   TrUserData)
				      end,
				      F@_3, TrUserData).

d_field_DirectoryReply_emissao(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_DirectoryReply_emissao(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_DirectoryReply_emissao(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_EmissaoReply(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DirectoryReply(RestF, 0, 0, F@_1,
				      F@_2,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_EmissaoReply(Prev,
								    NewFValue,
								    TrUserData)
				      end,
				      TrUserData).

skip_varint_DirectoryReply(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_DirectoryReply(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
skip_varint_DirectoryReply(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_DirectoryReply(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_length_delimited_DirectoryReply(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_DirectoryReply(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
skip_length_delimited_DirectoryReply(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DirectoryReply(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, TrUserData).

skip_group_DirectoryReply(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DirectoryReply(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_32_DirectoryReply(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_DirectoryReply(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_64_DirectoryReply(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_DirectoryReply(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

decode_msg_DirectoryRequest(Bin, TrUserData) ->
    dfp_read_field_def_DirectoryRequest(Bin, 0, 0,
					id('$undef', TrUserData),
					id('$undef', TrUserData), TrUserData).

dfp_read_field_def_DirectoryRequest(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_DirectoryRequest_tipo(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_DirectoryRequest(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_DirectoryRequest_empresa(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_DirectoryRequest(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #{tipo => F@_1, empresa => F@_2};
dfp_read_field_def_DirectoryRequest(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData) ->
    dg_read_field_def_DirectoryRequest(Other, Z1, Z2, F@_1,
				       F@_2, TrUserData).

dg_read_field_def_DirectoryRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DirectoryRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_DirectoryRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DirectoryRequest_tipo(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      18 ->
	  d_field_DirectoryRequest_empresa(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DirectoryRequest(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    1 ->
		skip_64_DirectoryRequest(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    2 ->
		skip_length_delimited_DirectoryRequest(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    3 ->
		skip_group_DirectoryRequest(Rest, Key bsr 3, 0, F@_1,
					    F@_2, TrUserData);
	    5 ->
		skip_32_DirectoryRequest(Rest, 0, 0, F@_1, F@_2,
					 TrUserData)
	  end
    end;
dg_read_field_def_DirectoryRequest(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #{tipo => F@_1, empresa => F@_2}.

d_field_DirectoryRequest_tipo(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_DirectoryRequest_tipo(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_DirectoryRequest_tipo(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DirectoryRequest(RestF, 0, 0,
					NewFValue, F@_2, TrUserData).

d_field_DirectoryRequest_empresa(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_DirectoryRequest_empresa(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_DirectoryRequest_empresa(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DirectoryRequest(RestF, 0, 0, F@_1,
					NewFValue, TrUserData).

skip_varint_DirectoryRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_DirectoryRequest(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
skip_varint_DirectoryRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_DirectoryRequest(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_length_delimited_DirectoryRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_DirectoryRequest(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
skip_length_delimited_DirectoryRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DirectoryRequest(Rest2, 0, 0, F@_1,
					F@_2, TrUserData).

skip_group_DirectoryRequest(Bin, FNum, Z2, F@_1, F@_2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DirectoryRequest(Rest, 0, Z2, F@_1,
					F@_2, TrUserData).

skip_32_DirectoryRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_DirectoryRequest(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_64_DirectoryRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_DirectoryRequest(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

decode_msg_AddDirectoryRequest(Bin, TrUserData) ->
    dfp_read_field_def_AddDirectoryRequest(Bin, 0, 0,
					   id('$undef', TrUserData),
					   id('$undef', TrUserData),
					   id('$undef', TrUserData),
					   id('$undef', TrUserData),
					   id('$undef', TrUserData),
					   TrUserData).

dfp_read_field_def_AddDirectoryRequest(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    d_field_AddDirectoryRequest_tipo(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_AddDirectoryRequest(<<21,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    d_field_AddDirectoryRequest_juro(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_AddDirectoryRequest(<<24,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    d_field_AddDirectoryRequest_quantia(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_AddDirectoryRequest(<<34,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    d_field_AddDirectoryRequest_empresa(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_AddDirectoryRequest(<<42,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    d_field_AddDirectoryRequest_investidor(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_AddDirectoryRequest(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{tipo => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{juro => F@_2}
	 end,
    S3 = if F@_3 == '$undef' -> S2;
	    true -> S2#{quantia => F@_3}
	 end,
    S4 = if F@_4 == '$undef' -> S3;
	    true -> S3#{empresa => F@_4}
	 end,
    if F@_5 == '$undef' -> S4;
       true -> S4#{investidor => F@_5}
    end;
dfp_read_field_def_AddDirectoryRequest(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    dg_read_field_def_AddDirectoryRequest(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

dg_read_field_def_AddDirectoryRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddDirectoryRequest(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, TrUserData);
dg_read_field_def_AddDirectoryRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddDirectoryRequest_tipo(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      21 ->
	  d_field_AddDirectoryRequest_juro(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_AddDirectoryRequest_quantia(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      34 ->
	  d_field_AddDirectoryRequest_empresa(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      42 ->
	  d_field_AddDirectoryRequest_investidor(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddDirectoryRequest(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_AddDirectoryRequest(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_AddDirectoryRequest(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData);
	    3 ->
		skip_group_AddDirectoryRequest(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
	    5 ->
		skip_32_AddDirectoryRequest(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_AddDirectoryRequest(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{tipo => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{juro => F@_2}
	 end,
    S3 = if F@_3 == '$undef' -> S2;
	    true -> S2#{quantia => F@_3}
	 end,
    S4 = if F@_4 == '$undef' -> S3;
	    true -> S3#{empresa => F@_4}
	 end,
    if F@_5 == '$undef' -> S4;
       true -> S4#{investidor => F@_5}
    end.

d_field_AddDirectoryRequest_tipo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_AddDirectoryRequest_tipo(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_AddDirectoryRequest_tipo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddDirectoryRequest(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

d_field_AddDirectoryRequest_juro(<<0:16, 128, 127,
				   Rest/binary>>,
				 Z1, Z2, F@_1, _, F@_3, F@_4, F@_5,
				 TrUserData) ->
    dfp_read_field_def_AddDirectoryRequest(Rest, Z1, Z2,
					   F@_1, id(infinity, TrUserData), F@_3,
					   F@_4, F@_5, TrUserData);
d_field_AddDirectoryRequest_juro(<<0:16, 128, 255,
				   Rest/binary>>,
				 Z1, Z2, F@_1, _, F@_3, F@_4, F@_5,
				 TrUserData) ->
    dfp_read_field_def_AddDirectoryRequest(Rest, Z1, Z2,
					   F@_1, id('-infinity', TrUserData),
					   F@_3, F@_4, F@_5, TrUserData);
d_field_AddDirectoryRequest_juro(<<_:16, 1:1, _:7, _:1,
				   127:7, Rest/binary>>,
				 Z1, Z2, F@_1, _, F@_3, F@_4, F@_5,
				 TrUserData) ->
    dfp_read_field_def_AddDirectoryRequest(Rest, Z1, Z2,
					   F@_1, id(nan, TrUserData), F@_3,
					   F@_4, F@_5, TrUserData);
d_field_AddDirectoryRequest_juro(<<Value:32/little-float,
				   Rest/binary>>,
				 Z1, Z2, F@_1, _, F@_3, F@_4, F@_5,
				 TrUserData) ->
    dfp_read_field_def_AddDirectoryRequest(Rest, Z1, Z2,
					   F@_1, id(Value, TrUserData), F@_3,
					   F@_4, F@_5, TrUserData).

d_field_AddDirectoryRequest_quantia(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_AddDirectoryRequest_quantia(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_AddDirectoryRequest_quantia(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_AddDirectoryRequest(RestF, 0, 0,
					   F@_1, F@_2, NewFValue, F@_4, F@_5,
					   TrUserData).

d_field_AddDirectoryRequest_empresa(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_AddDirectoryRequest_empresa(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_AddDirectoryRequest_empresa(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddDirectoryRequest(RestF, 0, 0,
					   F@_1, F@_2, F@_3, NewFValue, F@_5,
					   TrUserData).

d_field_AddDirectoryRequest_investidor(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_AddDirectoryRequest_investidor(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_AddDirectoryRequest_investidor(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddDirectoryRequest(RestF, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, NewFValue,
					   TrUserData).

skip_varint_AddDirectoryRequest(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    skip_varint_AddDirectoryRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_AddDirectoryRequest(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    dfp_read_field_def_AddDirectoryRequest(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

skip_length_delimited_AddDirectoryRequest(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    skip_length_delimited_AddDirectoryRequest(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
skip_length_delimited_AddDirectoryRequest(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddDirectoryRequest(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

skip_group_AddDirectoryRequest(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddDirectoryRequest(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

skip_32_AddDirectoryRequest(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_AddDirectoryRequest(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

skip_64_AddDirectoryRequest(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_AddDirectoryRequest(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

decode_msg_AuthReq(Bin, TrUserData) ->
    dfp_read_field_def_AuthReq(Bin, 0, 0,
			       id('$undef', TrUserData),
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_AuthReq(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_AuthReq_username(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_AuthReq(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_AuthReq_password(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_AuthReq(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{username => F@_1, password => F@_2};
dfp_read_field_def_AuthReq(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_AuthReq(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_AuthReq(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthReq(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_AuthReq(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthReq_username(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      18 ->
	  d_field_AuthReq_password(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthReq(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_AuthReq(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_AuthReq(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_AuthReq(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_AuthReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_AuthReq(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{username => F@_1, password => F@_2}.

d_field_AuthReq_username(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthReq_username(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_AuthReq_username(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthReq(RestF, 0, 0, NewFValue, F@_2,
			       TrUserData).

d_field_AuthReq_password(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthReq_password(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_AuthReq_password(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthReq(RestF, 0, 0, F@_1, NewFValue,
			       TrUserData).

skip_varint_AuthReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_AuthReq(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_AuthReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthReq(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_AuthReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthReq(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AuthReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthReq(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_AuthReq(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthReq(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_AuthReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_AuthReq(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_AuthReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_AuthReq(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

decode_msg_AuthRep(Bin, TrUserData) ->
    dfp_read_field_def_AuthRep(Bin, 0, 0,
			       id('$undef', TrUserData),
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_AuthRep(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_AuthRep_sucesso(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_AuthRep(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_AuthRep_tipo(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_AuthRep(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{sucesso => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{tipo => F@_2}
    end;
dfp_read_field_def_AuthRep(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_AuthRep(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_AuthRep(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthRep(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_AuthRep(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AuthRep_sucesso(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      16 ->
	  d_field_AuthRep_tipo(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthRep(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_AuthRep(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_AuthRep(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_AuthRep(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_AuthRep(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_AuthRep(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{sucesso => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{tipo => F@_2}
    end.

d_field_AuthRep_sucesso(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthRep_sucesso(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_AuthRep_sucesso(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_AuthRep(RestF, 0, 0, NewFValue, F@_2,
			       TrUserData).

d_field_AuthRep_tipo(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthRep_tipo(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_AuthRep_tipo(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_AuthRep(RestF, 0, 0, F@_1, NewFValue,
			       TrUserData).

skip_varint_AuthRep(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_AuthRep(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_AuthRep(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthRep(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_AuthRep(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthRep(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AuthRep(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthRep(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_AuthRep(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthRep(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_AuthRep(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_AuthRep(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_AuthRep(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_AuthRep(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

decode_msg_Reply(Bin, TrUserData) ->
    dfp_read_field_def_Reply(Bin, 0, 0,
			     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Reply(<<8, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Reply_sucesso(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Reply(<<>>, 0, 0, F@_1, _) ->
    #{sucesso => F@_1};
dfp_read_field_def_Reply(Other, Z1, Z2, F@_1,
			 TrUserData) ->
    dg_read_field_def_Reply(Other, Z1, Z2, F@_1,
			    TrUserData).

dg_read_field_def_Reply(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Reply(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
dg_read_field_def_Reply(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Reply_sucesso(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Reply(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Reply(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Reply(Rest, 0, 0, F@_1,
					    TrUserData);
	    3 ->
		skip_group_Reply(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_Reply(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Reply(<<>>, 0, 0, F@_1, _) ->
    #{sucesso => F@_1}.

d_field_Reply_sucesso(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_Reply_sucesso(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_Reply_sucesso(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Reply(RestF, 0, 0, NewFValue,
			     TrUserData).

skip_varint_Reply(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, TrUserData) ->
    skip_varint_Reply(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Reply(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, TrUserData) ->
    dfp_read_field_def_Reply(Rest, Z1, Z2, F@_1,
			     TrUserData).

skip_length_delimited_Reply(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Reply(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
skip_length_delimited_Reply(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Reply(Rest2, 0, 0, F@_1, TrUserData).

skip_group_Reply(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Reply(Rest, 0, Z2, F@_1, TrUserData).

skip_32_Reply(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	      TrUserData) ->
    dfp_read_field_def_Reply(Rest, Z1, Z2, F@_1,
			     TrUserData).

skip_64_Reply(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	      TrUserData) ->
    dfp_read_field_def_Reply(Rest, Z1, Z2, F@_1,
			     TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Mensagem' -> merge_msg_Mensagem(Prev, New, TrUserData);
      'ExchangeRequest' ->
	  merge_msg_ExchangeRequest(Prev, New, TrUserData);
      'ExchangeReply' ->
	  merge_msg_ExchangeReply(Prev, New, TrUserData);
      'LeilaoReply' ->
	  merge_msg_LeilaoReply(Prev, New, TrUserData);
      'EmissaoReply' ->
	  merge_msg_EmissaoReply(Prev, New, TrUserData);
      'DirectoryReply' ->
	  merge_msg_DirectoryReply(Prev, New, TrUserData);
      'DirectoryRequest' ->
	  merge_msg_DirectoryRequest(Prev, New, TrUserData);
      'AddDirectoryRequest' ->
	  merge_msg_AddDirectoryRequest(Prev, New, TrUserData);
      'AuthReq' -> merge_msg_AuthReq(Prev, New, TrUserData);
      'AuthRep' -> merge_msg_AuthRep(Prev, New, TrUserData);
      'Reply' -> merge_msg_Reply(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Mensagem/3}).
merge_msg_Mensagem(#{} = PMsg, #{tipo := NFtipo} = NMsg,
		   _) ->
    S1 = #{tipo => NFtipo},
    S2 = case {PMsg, NMsg} of
	   {_, #{juro := NFjuro}} -> S1#{juro => NFjuro};
	   {#{juro := PFjuro}, _} -> S1#{juro => PFjuro};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{quantia := NFquantia}} ->
	       S2#{quantia => NFquantia};
	   {#{quantia := PFquantia}, _} ->
	       S2#{quantia => PFquantia};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{empresa := NFempresa}} ->
	       S3#{empresa => NFempresa};
	   {#{empresa := PFempresa}, _} ->
	       S3#{empresa => PFempresa};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{investidor := NFinvestidor}} ->
	  S4#{investidor => NFinvestidor};
      {#{investidor := PFinvestidor}, _} ->
	  S4#{investidor => PFinvestidor};
      _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_ExchangeRequest/3}).
merge_msg_ExchangeRequest(#{mensagem := PFmensagem},
			  #{mensagem := NFmensagem, pid := NFpid},
			  TrUserData) ->
    #{mensagem =>
	  merge_msg_Mensagem(PFmensagem, NFmensagem, TrUserData),
      pid => NFpid}.

-compile({nowarn_unused_function,merge_msg_ExchangeReply/3}).
merge_msg_ExchangeReply(#{}, #{sucesso := NFsucesso},
			_) ->
    #{sucesso => NFsucesso}.

-compile({nowarn_unused_function,merge_msg_LeilaoReply/3}).
merge_msg_LeilaoReply(#{},
		      #{taxaMaximaAlocada := NFtaxaMaximaAlocada,
			taxaMaxima := NFtaxaMaxima, sucesso := NFsucesso},
		      _) ->
    #{taxaMaximaAlocada => NFtaxaMaximaAlocada,
      taxaMaxima => NFtaxaMaxima, sucesso => NFsucesso}.

-compile({nowarn_unused_function,merge_msg_EmissaoReply/3}).
merge_msg_EmissaoReply(#{},
		       #{taxa := NFtaxa, sucesso := NFsucesso}, _) ->
    #{taxa => NFtaxa, sucesso => NFsucesso}.

-compile({nowarn_unused_function,merge_msg_DirectoryReply/3}).
merge_msg_DirectoryReply(#{} = PMsg,
			 #{success := NFsuccess} = NMsg, TrUserData) ->
    S1 = #{success => NFsuccess},
    S2 = case {PMsg, NMsg} of
	   {#{leilao := PFleilao}, #{leilao := NFleilao}} ->
	       S1#{leilao =>
		       merge_msg_LeilaoReply(PFleilao, NFleilao, TrUserData)};
	   {_, #{leilao := NFleilao}} -> S1#{leilao => NFleilao};
	   {#{leilao := PFleilao}, _} -> S1#{leilao => PFleilao};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{emissao := PFemissao}, #{emissao := NFemissao}} ->
	  S2#{emissao =>
		  merge_msg_EmissaoReply(PFemissao, NFemissao,
					 TrUserData)};
      {_, #{emissao := NFemissao}} ->
	  S2#{emissao => NFemissao};
      {#{emissao := PFemissao}, _} ->
	  S2#{emissao => PFemissao};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_DirectoryRequest/3}).
merge_msg_DirectoryRequest(#{},
			   #{tipo := NFtipo, empresa := NFempresa}, _) ->
    #{tipo => NFtipo, empresa => NFempresa}.

-compile({nowarn_unused_function,merge_msg_AddDirectoryRequest/3}).
merge_msg_AddDirectoryRequest(#{} = PMsg,
			      #{tipo := NFtipo} = NMsg, _) ->
    S1 = #{tipo => NFtipo},
    S2 = case {PMsg, NMsg} of
	   {_, #{juro := NFjuro}} -> S1#{juro => NFjuro};
	   {#{juro := PFjuro}, _} -> S1#{juro => PFjuro};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{quantia := NFquantia}} ->
	       S2#{quantia => NFquantia};
	   {#{quantia := PFquantia}, _} ->
	       S2#{quantia => PFquantia};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{empresa := NFempresa}} ->
	       S3#{empresa => NFempresa};
	   {#{empresa := PFempresa}, _} ->
	       S3#{empresa => PFempresa};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{investidor := NFinvestidor}} ->
	  S4#{investidor => NFinvestidor};
      {#{investidor := PFinvestidor}, _} ->
	  S4#{investidor => PFinvestidor};
      _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_AuthReq/3}).
merge_msg_AuthReq(#{},
		  #{username := NFusername, password := NFpassword}, _) ->
    #{username => NFusername, password => NFpassword}.

-compile({nowarn_unused_function,merge_msg_AuthRep/3}).
merge_msg_AuthRep(#{} = PMsg,
		  #{sucesso := NFsucesso} = NMsg, _) ->
    S1 = #{sucesso => NFsucesso},
    case {PMsg, NMsg} of
      {_, #{tipo := NFtipo}} -> S1#{tipo => NFtipo};
      {#{tipo := PFtipo}, _} -> S1#{tipo => PFtipo};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_Reply/3}).
merge_msg_Reply(#{}, #{sucesso := NFsucesso}, _) ->
    #{sucesso => NFsucesso}.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Mensagem' ->
	  v_msg_Mensagem(Msg, [MsgName], TrUserData);
      'ExchangeRequest' ->
	  v_msg_ExchangeRequest(Msg, [MsgName], TrUserData);
      'ExchangeReply' ->
	  v_msg_ExchangeReply(Msg, [MsgName], TrUserData);
      'LeilaoReply' ->
	  v_msg_LeilaoReply(Msg, [MsgName], TrUserData);
      'EmissaoReply' ->
	  v_msg_EmissaoReply(Msg, [MsgName], TrUserData);
      'DirectoryReply' ->
	  v_msg_DirectoryReply(Msg, [MsgName], TrUserData);
      'DirectoryRequest' ->
	  v_msg_DirectoryRequest(Msg, [MsgName], TrUserData);
      'AddDirectoryRequest' ->
	  v_msg_AddDirectoryRequest(Msg, [MsgName], TrUserData);
      'AuthReq' -> v_msg_AuthReq(Msg, [MsgName], TrUserData);
      'AuthRep' -> v_msg_AuthRep(Msg, [MsgName], TrUserData);
      'Reply' -> v_msg_Reply(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Mensagem/3}).
-dialyzer({nowarn_function,v_msg_Mensagem/3}).
v_msg_Mensagem(#{tipo := F1} = M, Path, TrUserData) ->
    v_type_string(F1, [tipo | Path], TrUserData),
    case M of
      #{juro := F2} ->
	  v_type_float(F2, [juro | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{quantia := F3} ->
	  v_type_int32(F3, [quantia | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{empresa := F4} ->
	  v_type_string(F4, [empresa | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{investidor := F5} ->
	  v_type_string(F5, [investidor | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (tipo) -> ok;
		      (juro) -> ok;
		      (quantia) -> ok;
		      (empresa) -> ok;
		      (investidor) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Mensagem(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [tipo] -- maps:keys(M),
		   'Mensagem'},
		  M, Path);
v_msg_Mensagem(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Mensagem'}, X, Path).

-compile({nowarn_unused_function,v_msg_ExchangeRequest/3}).
-dialyzer({nowarn_function,v_msg_ExchangeRequest/3}).
v_msg_ExchangeRequest(#{mensagem := F1, pid := F2} = M,
		      Path, TrUserData) ->
    v_msg_Mensagem(F1, [mensagem | Path], TrUserData),
    v_type_bytes(F2, [pid | Path], TrUserData),
    lists:foreach(fun (mensagem) -> ok;
		      (pid) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ExchangeRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [mensagem, pid] -- maps:keys(M), 'ExchangeRequest'},
		  M, Path);
v_msg_ExchangeRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ExchangeRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ExchangeReply/3}).
-dialyzer({nowarn_function,v_msg_ExchangeReply/3}).
v_msg_ExchangeReply(#{sucesso := F1} = M, Path,
		    TrUserData) ->
    v_type_bool(F1, [sucesso | Path], TrUserData),
    lists:foreach(fun (sucesso) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ExchangeReply(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [sucesso] -- maps:keys(M), 'ExchangeReply'},
		  M, Path);
v_msg_ExchangeReply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ExchangeReply'}, X, Path).

-compile({nowarn_unused_function,v_msg_LeilaoReply/3}).
-dialyzer({nowarn_function,v_msg_LeilaoReply/3}).
v_msg_LeilaoReply(#{taxaMaximaAlocada := F1,
		    taxaMaxima := F2, sucesso := F3} =
		      M,
		  Path, TrUserData) ->
    v_type_float(F1, [taxaMaximaAlocada | Path],
		 TrUserData),
    v_type_float(F2, [taxaMaxima | Path], TrUserData),
    v_type_bool(F3, [sucesso | Path], TrUserData),
    lists:foreach(fun (taxaMaximaAlocada) -> ok;
		      (taxaMaxima) -> ok;
		      (sucesso) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_LeilaoReply(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [taxaMaximaAlocada, taxaMaxima, sucesso] --
		     maps:keys(M),
		   'LeilaoReply'},
		  M, Path);
v_msg_LeilaoReply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LeilaoReply'}, X, Path).

-compile({nowarn_unused_function,v_msg_EmissaoReply/3}).
-dialyzer({nowarn_function,v_msg_EmissaoReply/3}).
v_msg_EmissaoReply(#{taxa := F1, sucesso := F2} = M,
		   Path, TrUserData) ->
    v_type_float(F1, [taxa | Path], TrUserData),
    v_type_bool(F2, [sucesso | Path], TrUserData),
    lists:foreach(fun (taxa) -> ok;
		      (sucesso) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_EmissaoReply(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [taxa, sucesso] -- maps:keys(M), 'EmissaoReply'},
		  M, Path);
v_msg_EmissaoReply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EmissaoReply'}, X, Path).

-compile({nowarn_unused_function,v_msg_DirectoryReply/3}).
-dialyzer({nowarn_function,v_msg_DirectoryReply/3}).
v_msg_DirectoryReply(#{success := F1} = M, Path,
		     TrUserData) ->
    v_type_bool(F1, [success | Path], TrUserData),
    case M of
      #{leilao := F2} ->
	  v_msg_LeilaoReply(F2, [leilao | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{emissao := F3} ->
	  v_msg_EmissaoReply(F3, [emissao | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (success) -> ok;
		      (leilao) -> ok;
		      (emissao) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_DirectoryReply(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [success] -- maps:keys(M), 'DirectoryReply'},
		  M, Path);
v_msg_DirectoryReply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DirectoryReply'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_DirectoryRequest/3}).
-dialyzer({nowarn_function,v_msg_DirectoryRequest/3}).
v_msg_DirectoryRequest(#{tipo := F1, empresa := F2} = M,
		       Path, TrUserData) ->
    v_type_string(F1, [tipo | Path], TrUserData),
    v_type_string(F2, [empresa | Path], TrUserData),
    lists:foreach(fun (tipo) -> ok;
		      (empresa) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_DirectoryRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [tipo, empresa] -- maps:keys(M), 'DirectoryRequest'},
		  M, Path);
v_msg_DirectoryRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DirectoryRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AddDirectoryRequest/3}).
-dialyzer({nowarn_function,v_msg_AddDirectoryRequest/3}).
v_msg_AddDirectoryRequest(#{tipo := F1} = M, Path,
			  TrUserData) ->
    v_type_string(F1, [tipo | Path], TrUserData),
    case M of
      #{juro := F2} ->
	  v_type_float(F2, [juro | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{quantia := F3} ->
	  v_type_int32(F3, [quantia | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{empresa := F4} ->
	  v_type_string(F4, [empresa | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{investidor := F5} ->
	  v_type_string(F5, [investidor | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (tipo) -> ok;
		      (juro) -> ok;
		      (quantia) -> ok;
		      (empresa) -> ok;
		      (investidor) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AddDirectoryRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [tipo] -- maps:keys(M),
		   'AddDirectoryRequest'},
		  M, Path);
v_msg_AddDirectoryRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddDirectoryRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthReq/3}).
-dialyzer({nowarn_function,v_msg_AuthReq/3}).
v_msg_AuthReq(#{username := F1, password := F2} = M,
	      Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    lists:foreach(fun (username) -> ok;
		      (password) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthReq(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [username, password] -- maps:keys(M), 'AuthReq'},
		  M, Path);
v_msg_AuthReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_AuthRep/3}).
-dialyzer({nowarn_function,v_msg_AuthRep/3}).
v_msg_AuthRep(#{sucesso := F1} = M, Path, TrUserData) ->
    v_type_bool(F1, [sucesso | Path], TrUserData),
    case M of
      #{tipo := F2} ->
	  v_type_int32(F2, [tipo | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (sucesso) -> ok;
		      (tipo) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AuthRep(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [sucesso] -- maps:keys(M), 'AuthRep'},
		  M, Path);
v_msg_AuthRep(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthRep'}, X, Path).

-compile({nowarn_unused_function,v_msg_Reply/3}).
-dialyzer({nowarn_function,v_msg_Reply/3}).
v_msg_Reply(#{sucesso := F1} = M, Path, TrUserData) ->
    v_type_bool(F1, [sucesso | Path], TrUserData),
    lists:foreach(fun (sucesso) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Reply(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [sucesso] -- maps:keys(M), 'Reply'},
		  M, Path);
v_msg_Reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Reply'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'Mensagem'},
      [#{name => tipo, fnum => 1, rnum => 2, type => string,
	 occurrence => required, opts => []},
       #{name => juro, fnum => 2, rnum => 3, type => float,
	 occurrence => optional, opts => []},
       #{name => quantia, fnum => 3, rnum => 4, type => int32,
	 occurrence => optional, opts => []},
       #{name => empresa, fnum => 4, rnum => 5, type => string,
	 occurrence => optional, opts => []},
       #{name => investidor, fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'ExchangeRequest'},
      [#{name => mensagem, fnum => 1, rnum => 2,
	 type => {msg, 'Mensagem'}, occurrence => required,
	 opts => []},
       #{name => pid, fnum => 2, rnum => 3, type => bytes,
	 occurrence => required, opts => []}]},
     {{msg, 'ExchangeReply'},
      [#{name => sucesso, fnum => 1, rnum => 2, type => bool,
	 occurrence => required, opts => []}]},
     {{msg, 'LeilaoReply'},
      [#{name => taxaMaximaAlocada, fnum => 1, rnum => 2,
	 type => float, occurrence => required, opts => []},
       #{name => taxaMaxima, fnum => 2, rnum => 3,
	 type => float, occurrence => required, opts => []},
       #{name => sucesso, fnum => 3, rnum => 4, type => bool,
	 occurrence => required, opts => []}]},
     {{msg, 'EmissaoReply'},
      [#{name => taxa, fnum => 1, rnum => 2, type => float,
	 occurrence => required, opts => []},
       #{name => sucesso, fnum => 2, rnum => 3, type => bool,
	 occurrence => required, opts => []}]},
     {{msg, 'DirectoryReply'},
      [#{name => success, fnum => 1, rnum => 2, type => bool,
	 occurrence => required, opts => []},
       #{name => leilao, fnum => 2, rnum => 3,
	 type => {msg, 'LeilaoReply'}, occurrence => optional,
	 opts => []},
       #{name => emissao, fnum => 3, rnum => 4,
	 type => {msg, 'EmissaoReply'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'DirectoryRequest'},
      [#{name => tipo, fnum => 1, rnum => 2, type => string,
	 occurrence => required, opts => []},
       #{name => empresa, fnum => 2, rnum => 3, type => string,
	 occurrence => required, opts => []}]},
     {{msg, 'AddDirectoryRequest'},
      [#{name => tipo, fnum => 1, rnum => 2, type => string,
	 occurrence => required, opts => []},
       #{name => juro, fnum => 2, rnum => 3, type => float,
	 occurrence => optional, opts => []},
       #{name => quantia, fnum => 3, rnum => 4, type => int32,
	 occurrence => optional, opts => []},
       #{name => empresa, fnum => 4, rnum => 5, type => string,
	 occurrence => optional, opts => []},
       #{name => investidor, fnum => 5, rnum => 6,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'AuthReq'},
      [#{name => username, fnum => 1, rnum => 2,
	 type => string, occurrence => required, opts => []},
       #{name => password, fnum => 2, rnum => 3,
	 type => string, occurrence => required, opts => []}]},
     {{msg, 'AuthRep'},
      [#{name => sucesso, fnum => 1, rnum => 2, type => bool,
	 occurrence => required, opts => []},
       #{name => tipo, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, 'Reply'},
      [#{name => sucesso, fnum => 1, rnum => 2, type => bool,
	 occurrence => required, opts => []}]}].


get_msg_names() ->
    ['Mensagem', 'ExchangeRequest', 'ExchangeReply',
     'LeilaoReply', 'EmissaoReply', 'DirectoryReply',
     'DirectoryRequest', 'AddDirectoryRequest', 'AuthReq',
     'AuthRep', 'Reply'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Mensagem', 'ExchangeRequest', 'ExchangeReply',
     'LeilaoReply', 'EmissaoReply', 'DirectoryReply',
     'DirectoryRequest', 'AddDirectoryRequest', 'AuthReq',
     'AuthRep', 'Reply'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Mensagem') ->
    [#{name => tipo, fnum => 1, rnum => 2, type => string,
       occurrence => required, opts => []},
     #{name => juro, fnum => 2, rnum => 3, type => float,
       occurrence => optional, opts => []},
     #{name => quantia, fnum => 3, rnum => 4, type => int32,
       occurrence => optional, opts => []},
     #{name => empresa, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []},
     #{name => investidor, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []}];
find_msg_def('ExchangeRequest') ->
    [#{name => mensagem, fnum => 1, rnum => 2,
       type => {msg, 'Mensagem'}, occurrence => required,
       opts => []},
     #{name => pid, fnum => 2, rnum => 3, type => bytes,
       occurrence => required, opts => []}];
find_msg_def('ExchangeReply') ->
    [#{name => sucesso, fnum => 1, rnum => 2, type => bool,
       occurrence => required, opts => []}];
find_msg_def('LeilaoReply') ->
    [#{name => taxaMaximaAlocada, fnum => 1, rnum => 2,
       type => float, occurrence => required, opts => []},
     #{name => taxaMaxima, fnum => 2, rnum => 3,
       type => float, occurrence => required, opts => []},
     #{name => sucesso, fnum => 3, rnum => 4, type => bool,
       occurrence => required, opts => []}];
find_msg_def('EmissaoReply') ->
    [#{name => taxa, fnum => 1, rnum => 2, type => float,
       occurrence => required, opts => []},
     #{name => sucesso, fnum => 2, rnum => 3, type => bool,
       occurrence => required, opts => []}];
find_msg_def('DirectoryReply') ->
    [#{name => success, fnum => 1, rnum => 2, type => bool,
       occurrence => required, opts => []},
     #{name => leilao, fnum => 2, rnum => 3,
       type => {msg, 'LeilaoReply'}, occurrence => optional,
       opts => []},
     #{name => emissao, fnum => 3, rnum => 4,
       type => {msg, 'EmissaoReply'}, occurrence => optional,
       opts => []}];
find_msg_def('DirectoryRequest') ->
    [#{name => tipo, fnum => 1, rnum => 2, type => string,
       occurrence => required, opts => []},
     #{name => empresa, fnum => 2, rnum => 3, type => string,
       occurrence => required, opts => []}];
find_msg_def('AddDirectoryRequest') ->
    [#{name => tipo, fnum => 1, rnum => 2, type => string,
       occurrence => required, opts => []},
     #{name => juro, fnum => 2, rnum => 3, type => float,
       occurrence => optional, opts => []},
     #{name => quantia, fnum => 3, rnum => 4, type => int32,
       occurrence => optional, opts => []},
     #{name => empresa, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []},
     #{name => investidor, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []}];
find_msg_def('AuthReq') ->
    [#{name => username, fnum => 1, rnum => 2,
       type => string, occurrence => required, opts => []},
     #{name => password, fnum => 2, rnum => 3,
       type => string, occurrence => required, opts => []}];
find_msg_def('AuthRep') ->
    [#{name => sucesso, fnum => 1, rnum => 2, type => bool,
       occurrence => required, opts => []},
     #{name => tipo, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def('Reply') ->
    [#{name => sucesso, fnum => 1, rnum => 2, type => bool,
       occurrence => required, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> 'Protos'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
